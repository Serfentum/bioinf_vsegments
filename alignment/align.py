from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import generic_dna
from Bio import AlignIO
from Bio.Align import MultipleSeqAlignment
from Bio import pairwise2
from v_segment_generation import *
from auxiliary import *


allele = 'CTGGGCCTGGACCCAGCAGCCCTCTGGGAAGGCGCTGGGGCACCTCAGCTCCAGGGGCAGCACACACTTCAGCCCAGCCTTTCTGGGCCAACTCTCCATCTGTAGAGACACATCCAAGGCCCAGTTATCCCTGCAGCTGAGCTCCGTGATGGCCAAGGGCAGGGCCGCACATTCCCGTGGGACACAGCG-----------------------ACACAAACG'


def gap_function_for_template(x, y):  # x is gap position in seq, y is gap length
    if y == 0:  # No gap
        return 0
    elif y == 1:  # Gap open penalty
        return -100
    return -10


def gap_function_for_read(x, y):  # x is gap position in seq, y is gap length
    if y == 0:  # No gap
        return 0
    elif y == 1:  # Gap open penalty
        return -100
    return -10

s = 'AATAACATTGATACTACATACCATGGTTTCACTGCATATGAAAAAATAAAAGATGATTTGTTCTAACTTTAAACATATGCACTTTCTGTTGATCTACTGTACCTCAATAGAACTGTTTTAAAATAAAAATTACAAAATTATAAGATTTATAGGTTTTAAGGTTTTATCACAGAGCAGATTTACCATAAGAAACCACAATTTCCCAAATGCTATCAATATCACAAATCTCCCCAGGACACTGTCACGTGCTCTGAGCCCCACTCTCTCCAAAGGCCTCTAACCAGAGAGCTTACTATATAGTAGGAGACATGGAAATAGAGCCCTCCCTCTGCTTATGAAAACCAGCCCAGCCCTGACCCTGCAGCTCTGGGACAGGAGCCCCAGCCCTGGGATTTTCAGGTGTTTTCATTTGGTGATCAGGACTGAACACAGAGGACCACCAAGGAGTCATGGCTGAGCTGGCTTTTTCTTGTGGCTATTTTAAAAGGTAATTCATGGAGAAATAGAAAAATTGAGTGTGAGTGGATAAGAGTGAGATAAACAGTGGATTTGTGTGGAAGTTTCTGACCAGGTTGTCTCTTTGTTTGCAGGTGTCCAGTGTGAGGTGCAGCTGGTGGAGTCTGGGGGAGGCTTGGTAAAGCCTGGGGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTCAGTGACTACTACATGAACTGGGTCCGCCAGGCTCCAGGGAAGGGGCTGGAGTGGGTCTCATCCATTAGTAGTAGTAGTACCATATACTACGCAGACTCTGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACTCACTGTATCTGCAAATGAACAGCCTGAGAGCCGAGGACACGGCTGTGTATTACTGTGCGAGAGACACAGTGAGGGGAAGTCAGTGTGAGCCCAGACACAAACCTCCCTGCAGGGGTCCCCAGGACCACCAGGGGGCGCCCGGGACACTGTGCACGGGGCTGTCTCCAGGGCAGGTGCAGGTGCTGCTGAGGCCTGGCTTCCCTGTCATGGCCTGGGCGGCCTCGTTGTCAAATTTCTCCAGGGAACTTCTCCAGATTTACAATTCTGTACTGACATTTCATGTCTCTAAATGCAAAACTTTTTTGTTCTTTTTGTATTTTTGTTTTTGTAACAGGAGGACACACCCTCACCTCCACAGAAGCCACAGTGTCACTTTGGGGGCAGAT'

sc = []
comb = list(gene_cores())[:20]
for i in comb:
    k = pairwise2.align.localms(i, s, 1, -2, -5, -1)[0]
    sc.append((k[0], k[1], float(k[2])))

g = 0
for i in sorted(sc, key=lambda x: x[2], reverse=True):
    for t in i:
        print(t)
    print()
    g += 1
    if g > 3:
        break

quit()
reads = SeqIO.parse('some_reads', 'fasta')
read1 = next(reads)
rid = read1.description
#  gap_function_for_template, gap_function_for_read
aa = pairwise2.align.localxs(allele, read1.seq, -5, -1)[0]
for i, j in enumerate(aa):
    print(i, j)


ali1 = MultipleSeqAlignment([SeqRecord(Seq(aa[0], generic_dna), id='v_segment'),
                             SeqRecord(Seq(aa[1], generic_dna), id=rid)])


print(ali1)
print(aa[0])
print(aa[1])
print(rid)


# AlignIO.write([ali1], 'al.fa', 'fasta')




